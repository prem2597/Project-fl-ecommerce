{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from \"../constants/userConstants\";\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: (email, password)\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: (name, email, password)\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["G:/Ecommerce Website/Project-fl-ecommerce/Padmahastha/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","update","userId","name","getState","userSignin","userInfo","USER_UPDATE_REQUEST","put","headers","Authorization","token","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","register","logout","remove","USER_LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,mBAAhD,EAAqEC,qBAArE,EAA4FC,qBAA5F,EAAmHC,kBAAnH,QAA6I,4BAA7I;;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACpDA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACR,mBAAN;AAA2BS,IAAAA,OAAO,GAAEJ,KAAK,EAACC,QAAR;AAAlC,GAAD,CAAR;;AACA,MAAI;AACA,UAAK;AAACI,MAAAA;AAAD,QAAS,MAAMd,KAAK,CAACe,IAAN,CAAW,mBAAX,EAAgC;AAACN,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAAhC,CAApB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACV,mBAAN;AAA2BW,MAAAA,OAAO,EAACC;AAAnC,KAAD,CAAR;AACAb,IAAAA,MAAM,CAACe,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACH,GAJD,CAIE,OAAOK,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACT,gBAAN;AAAwBU,MAAAA,OAAO,EAACM,KAAK,CAACC;AAAtC,KAAD,CAAR;AAEH;AAEJ,CAXD;;AAaA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBd,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC,OAAOC,QAAP,EAAiBa,QAAjB,KAA8B;AAChF,QAAM;AAAEC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AAAd,MAA+BF,QAAQ,EAA7C;AACAb,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEe,mBAAR;AAA6Bd,IAAAA,OAAO,EAAE;AAAES,MAAAA,MAAF;AAAUC,MAAAA,IAAV;AAAgBd,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAAtC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMd,KAAK,CAAC4B,GAAN,CAAU,gBAAgBN,MAA1B,EACrB;AAAEC,MAAAA,IAAF;AAAQd,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KADqB,EACM;AAC3BmB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYJ,QAAQ,CAACK;AAD7B;AADkB,KADN,CAAvB;AAMApB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEoB,mBAAR;AAA6BnB,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAb,IAAAA,MAAM,CAACe,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACD,GATD,CASE,OAAOK,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEqB,gBAAR;AAA0BpB,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CAfH;;AAkBA,MAAMc,QAAQ,GAAG,CAACX,IAAD,EAAMd,KAAN,EAAaC,QAAb,KAA0B,MAAOC,QAAP,IAAoB;AAC3DA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACP,qBAAN;AAA6BQ,IAAAA,OAAO,GAAEU,IAAI,EAACd,KAAD,EAAOC,QAAb;AAApC,GAAD,CAAR;;AACA,MAAI;AACA,UAAK;AAACI,MAAAA;AAAD,QAAS,MAAMd,KAAK,CAACe,IAAN,CAAW,qBAAX,EAAkC;AAACQ,MAAAA,IAAD;AAAMd,MAAAA,KAAN;AAAYC,MAAAA;AAAZ,KAAlC,CAApB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACN,qBAAN;AAA6BO,MAAAA,OAAO,EAACC;AAArC,KAAD,CAAR;AACAb,IAAAA,MAAM,CAACe,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACH,GAJD,CAIE,OAAOK,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACL,kBAAN;AAA0BM,MAAAA,OAAO,EAACM,KAAK,CAACC;AAAxC,KAAD,CAAR;AAEH;AAEJ,CAXD;;AAaA,MAAMe,MAAM,GAAG,MAAOxB,QAAD,IAAc;AAC/BV,EAAAA,MAAM,CAACmC,MAAP,CAAc,UAAd;AACAzB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEyB;AAAR,GAAD,CAAR;AACD,CAHH;;AAKA,SAAQ7B,MAAR,EAAgB0B,QAAhB,EAAyBC,MAAzB,EAAiCd,MAAjC","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from 'js-cookie';\r\nimport { USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from \"../constants/userConstants\";\r\n\r\nconst signin = (email, password) => async (dispatch )=> {\r\n    dispatch({type:USER_SIGNIN_REQUEST, payload:(email,password)});\r\n    try {\r\n        const{data} = await Axios.post(\"/api/users/signin\", {email,password})\r\n        dispatch({type:USER_SIGNIN_SUCCESS, payload:data});\r\n        Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({type:USER_SIGNIN_FAIL, payload:error.message});\r\n        \r\n    }\r\n\r\n}\r\n\r\nconst update = ({ userId, name, email, password }) => async (dispatch, getState) => {\r\n    const { userSignin: { userInfo } } = getState();\r\n    dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\r\n    try {\r\n      const { data } = await Axios.put(\"/api/users/\" + userId,\r\n        { name, email, password }, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + userInfo.token\r\n        }\r\n      });\r\n      dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n      Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n      dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\r\n    }\r\n  }\r\n\r\n\r\nconst register = (name,email, password) => async (dispatch )=> {\r\n    dispatch({type:USER_REGISTER_REQUEST, payload:(name,email,password)});\r\n    try {\r\n        const{data} = await Axios.post(\"/api/users/register\", {name,email,password})\r\n        dispatch({type:USER_REGISTER_SUCCESS, payload:data});\r\n        Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({type:USER_REGISTER_FAIL, payload:error.message});\r\n        \r\n    }\r\n\r\n}\r\n\r\nconst logout = () => (dispatch) => {\r\n    Cookie.remove(\"userInfo\");\r\n    dispatch({ type: USER_LOGOUT })\r\n  }\r\n\r\nexport {signin, register,logout, update};"]},"metadata":{},"sourceType":"module"}