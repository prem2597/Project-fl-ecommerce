{"version":3,"sources":["data.js","Screens/HomeScreen.js","Screens/ProductScreen.js","App.js","serviceWorker.js","index.js"],"names":["products","name","category","image","price","brand","rating","numReviews","HomeScreen","props","className","data","map","product","src","alt","href","ProductScreen","App","onClick","document","querySelector","classList","add","remove","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAAe,G,MAAA,CACXA,SAAS,CACL,CACAC,KAAM,aACNC,SAAS,SACTC,MAAM,sBACNC,MAAO,GACPC,MAAM,OACNC,OAAQ,IACRC,WAAY,IAEhB,CACIN,KAAM,YACNC,SAAS,SACTC,MAAM,sBACNC,MAAO,GACPC,MAAM,OACNC,OAAQ,IACRC,WAAY,GAEhB,CACIN,KAAM,aACNC,SAAS,QACTC,MAAM,sBACNC,MAAO,GACPC,MAAM,OACNC,OAAQ,IACRC,WAAY,M,qBCJLC,MApBf,SAAqBC,GACjB,OAAO,wBAAIC,UAAU,YAEnBC,EAAKX,SAASY,KAAI,SAAAC,GAAO,OACvB,4BACA,yBAAKH,UAAU,WACX,yBAAKA,UAAU,gBAAgBI,IAAMD,EAAQV,MAAQY,IAAI,YACzD,yBAAKL,UAAU,gBACX,uBAAGM,KAAK,gBAAR,IAAyBH,EAAQZ,KAAjC,MAEJ,yBAAKS,UAAU,iBAAf,IAAiCG,EAAQR,MAAzC,MACA,yBAAKK,UAAU,iBAAf,IAAiCG,EAAQT,MAAzC,MACA,yBAAKM,UAAU,kBAAf,IAAkCG,EAAQP,OAA1C,WAA0DO,EAAQN,WAAlE,oBCTGU,MAJf,SAAwBR,GACpB,OAAO,iDC4EIS,MAxEf,WASE,OACI,kBAAC,IAAD,KACF,yBAAKR,UAAY,kBACjB,4BAAQA,UAAU,UACd,yBAAKA,UAAU,SACX,4BAAQS,QAZD,WACfC,SAASC,cAAc,YAAYC,UAAUC,IAAI,UAWzC,UAGA,uBAAGP,KAAK,cAAR,cAEJ,yBAAKN,UAAU,gBACX,uBAAGM,KAAK,aAAR,QACA,uBAAGA,KAAK,eAAR,eAIJ,2BAAON,UAAU,WACb,oDACA,4BAAQA,UAAU,uBAAuBS,QArBjC,WAChBC,SAASC,cAAc,YAAYC,UAAUE,OAAO,UAoB5C,OACA,4BACI,4BACI,uBAAGR,KAAK,cAAR,WAGJ,4BACI,uBAAGA,KAAK,cAAR,eAMZ,0BAAMN,UAAU,QACZ,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAOe,KAAK,gBAAgBC,UAAWT,IACvC,kBAAC,IAAD,CAAOQ,KAAM,IAAIE,OAAO,EAAMD,UAAWlB,IACzC,wBAAIE,UAAU,YAEVC,EAAKX,SAASY,KAAI,SAAAC,GAAO,OAEzB,4BACI,yBAAKH,UAAU,WACX,yBAAKA,UAAU,gBAAgBI,IAAMD,EAAQV,MAAQY,IAAI,YACzD,yBAAKL,UAAU,gBACX,uBAAGM,KAAK,gBAAR,IAAyBH,EAAQZ,KAAjC,MAEJ,yBAAKS,UAAU,iBAAf,IAAiCG,EAAQR,MAAzC,MACA,yBAAKK,UAAU,iBAAf,IAAiCG,EAAQT,MAAzC,MACA,yBAAKM,UAAU,kBAAf,IAAkCG,EAAQP,OAA1C,WAA0DO,EAAQN,WAAlE,qBAQpB,4BAAQG,UAAU,UAAlB,2BC3DYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d36feb97.chunk.js","sourcesContent":["export default {\r\n    products:[\r\n        {\r\n        name: 'Slim Shirt',\r\n        category:'Shirts',\r\n        image:'/images/prabhas.jpg',\r\n        price: 60,\r\n        brand:'Nike',\r\n        rating: 4.5,\r\n        numReviews: 10\r\n    },\r\n    {\r\n        name: 'Fit Shirt',\r\n        category:'Shirts',\r\n        image:'/images/prabhas.jpg',\r\n        price: 80,\r\n        brand:'Nike',\r\n        rating: 4.5,\r\n        numReviews: 9\r\n    },\r\n    {\r\n        name: 'Best Pants',\r\n        category:'Pants',\r\n        image:'/images/prabhas.jpg',\r\n        price: 70,\r\n        brand:'Nike',\r\n        rating: 4.5,\r\n        numReviews: 8\r\n    },\r\n]\r\n}","import React from'react';\r\nimport data from '../data';\r\n\r\nfunction HomeScreen (props) {\r\n    return <ul className=\"products\">\r\n    {\r\n      data.products.map(product =>\r\n        <li>\r\n        <div className=\"product\">\r\n            <img className=\"product-image\" src= {product.image}  alt=\"product\"></img>\r\n            <div className=\"product-name\">\r\n                <a href=\"product.html\"> {product.name} </a>\r\n               </div>\r\n            <div className=\"product-brand\"> {product.brand}  </div>\r\n            <div className=\"product-price\"> {product.price}  </div>\r\n            <div className=\"product-rating\"> {product.rating} Stars ({product.numReviews} Reviews)</div>\r\n        </div> \r\n    </li>)\r\n    }\r\n</ul>          \r\n                   \r\n\r\n}\r\nexport default HomeScreen;","import React from 'react';\r\n\r\nfunction ProductScreen (props) {\r\n    return <div> ProductScreen </div>\r\n\r\n}\r\nexport default ProductScreen;","import React from 'react';\nimport data from './data';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport './App.css';\nimport HomeScreen from './Screens/HomeScreen';\nimport ProductScreen from './Screens/ProductScreen';\n\nfunction App() {\n\n  const openMenu = () =>{\n    document.querySelector(\".sidebar\").classList.add(\"open\");\n           \n  }\n  const closeMenu = () =>{\n    document.querySelector(\".sidebar\").classList.remove(\"open\");\n  }\n  return (\n      <BrowserRouter>\n    <div className = \"grid-container\">\n    <header className=\"header\">\n        <div className=\"brand\">\n            <button onClick={openMenu}>\n                &#9776;\n            </button>\n            <a href=\"index.html\">Padmastra</a>\n        </div>\n        <div className=\"header-links\">\n            <a href=\"cart.html\">Cart</a>\n            <a href=\"signin.html\"> Sign In </a>\n        </div>\n\n        </header>\n        <aside className=\"sidebar\">\n            <h3> Shopping categories</h3>\n            <button className=\"sidebar-close-button\" onClick={closeMenu}> x </button>\n            <ul>\n                <li>\n                    <a href=\"index.html\">Pants </a>\n                </li>\n\n                <li>\n                    <a href=\"index.html\"> Shirts </a>\n                </li>\n\n            \n            </ul>\n        </aside>\n        <main className=\"main\">\n            <div className=\"content\">\n                <Route path=\"/products/:id\" component={ProductScreen}/>\n                <Route path =\"/\" exact={true} component={HomeScreen}/>\n                <ul className=\"products\">\n                  {\n                    data.products.map(product =>\n                  \n                    <li>\n                        <div className=\"product\">\n                            <img className=\"product-image\" src= {product.image}  alt=\"product\"></img>\n                            <div className=\"product-name\">\n                                <a href=\"product.html\"> {product.name} </a>\n                               </div>\n                            <div className=\"product-brand\"> {product.brand}  </div>\n                            <div className=\"product-price\"> {product.price}  </div>\n                            <div className=\"product-rating\"> {product.rating} Stars ({product.numReviews} Reviews)</div>\n                        </div> \n                    </li>)\n                    }\n                </ul>\n            </div>\n        \n        </main>\n        <footer className=\"footer\">\n            All Rights Reserved.\n        </footer>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}